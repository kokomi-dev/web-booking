import { FaCalendarXmark, FaCheck } from "react-icons/fa6";

import { apiUrl, getDetailHotel } from "@/api/api-hotels";
import CardText from "@/components/components/card-text";

import NotFoundPage from "@/app/not-found";
import BreadcrumbHead from "@/components/components/breadcrumb";
import Comments from "@/components/components/comments";
import DisplayDocs from "@/components/components/display-docs";
import ReceiveFeedback from "@/components/components/receive-feedback";
import ShowOnMap from "@/components/components/show-on-map";
import { LIST_QUESTION_HOTELS } from "@/components/dashboard/constants";
import Booking from "@/components/dashboard/hotels/booking";
import HeadDetail from "@/components/dashboard/hotels/head-detail";
import Info from "@/components/dashboard/hotels/info";
import { PropsGenerateMetaData } from "@/types";
import { IHotel } from "@/types/hotel.type";
import {
  Baby,
  Bed,
  ChevronRight,
  MessageCircle,
  UserCheck,
} from "lucide-react";
import { Metadata } from "next";

export async function generateMetadata({
  params,
}: PropsGenerateMetaData): Promise<Metadata> {
  const slug = (await params).slug;
  try {
    const res = await fetch(`${apiUrl}/hotel/${slug}`);
    const data = await res.json();
    if (data.data) {
      return {
        title: data.data.name,
        description: data.data.details,
      };
    }
    return {};
  } catch (error) {
    throw new Error("L·ªói khi generateMetadata");
  }
}

export async function generateStaticParams() {
  try {
    const listHotel = await fetch(`${apiUrl}/hotel`).then((res) => res.json());

    if (!listHotel || !Array.isArray(listHotel.data)) {
      console.error(
        "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ tr∆∞·ªùng data",
        listHotel
      );
      return [];
    }
    return (await listHotel.data.filter((hotel: IHotel) => hotel.slug)).map(
      (hotel: IHotel) => ({
        slug: hotel.slug,
      })
    );
  } catch (error) {
    console.error("üî• L·ªói khi fetch danh s√°ch kh√°ch s·∫°n:", error);
    return [];
  }
}

const DetailHotelPage = async ({
  params: { slug },
}: {
  params: { slug: string };
}) => {
  const data = await getDetailHotel({ slug });
  if (!data) {
    return <NotFoundPage />;
  }

  return (
    <section className="w-full h-full section-spacing  ">
      {/* Breadcrumb */}
      <BreadcrumbHead
        items={[
          { label: "Trang ch·ªß", href: "/home" },
          { label: "L∆∞u tr√∫", href: "/hotels" },
          { label: `${data.name}` },
        ]}
      />
      <div className="container-spacing container xl:px-0">
        <HeadDetail />
        <Info
          name={data.name}
          location={data.location.detail}
          rating={data.rating}
          details={data.details}
          images={data}
          slug={slug}
        />
      </div>
      <div className=" container-spacing container xl:px-0">
        {data.cancelFree && (
          <div className="flex items-center bg-green-50 p-3 rounded-lg border border-green-200 shadow-sm">
            <FaCalendarXmark className="text-green w-5 h-5 lg:w-6 lg:h-6 mr-2 flex-shrink-0" />
            <p className="text-sm text-black_sub">
              B·∫°n c√≥ th·ªÉ h·ªßy trong v√≤ng 4 ti·∫øng t·ª´ khi ƒë·∫∑t v√© ho·∫∑c tr∆∞·ªõc 2 ng√†y
              ƒë·∫øn l·ªãch ƒë·∫∑t. Ngo√†i th·ªùi gian quy ƒë·ªãnh, ch√∫ng t√¥i s·∫Ω tr·ª´ ti·ªÅn
              chi·∫øt kh·∫•u.
            </p>
          </div>
        )}
        {/* n·ªôi dung and ƒë·∫∑t */}
        <div className="flex flex-col-reverse lg:flex-row gap-6 ">
          {/* Left Content */}
          <div className="flex-1 grid gap-6">
            {/* Description */}
            <CardText title="M√¥ t·∫£ v·ªÅ ch√∫ng t√¥i">
              <DisplayDocs docs={data.details} />
            </CardText>
            {/* Popular Amenities */}
            {data.includes.length > 0 && (
              <CardText title="C√°c ti·ªán nghi ƒë∆∞·ª£c ∆∞a chu·ªông nh·∫•t">
                <ul className="flex flex-wrap gap-4">
                  {data.includes.map((include: string, index: number) => (
                    <li key={index} className="flex items-center gap-2 text-sm">
                      <FaCheck className="text-green w-4 h-4" />
                      <span className="font-light">
                        {include.charAt(0).toUpperCase() + include.slice(1)}
                      </span>
                    </li>
                  ))}
                </ul>
              </CardText>
            )}
          </div>
          {/* Highlights */}
          {data.highlights.length > 0 && (
            <div className="w-full lg:w-1/3 bg-blue-50 p-4 rounded-lg shadow-sm">
              <CardText title="ƒêi·ªÉm n·ªïi b·∫≠t c·ªßa ch·ªó ngh·ªâ">
                <ul className="list-disc list-spacing pl-4">
                  {data.highlights.map((highlight: string, index: number) => (
                    <li key={index} className="text-sm text-black_sub">
                      {highlight}
                    </li>
                  ))}
                </ul>
              </CardText>
            </div>
          )}
        </div>

        <Booking slug={slug} listRooms={data.listRooms} />
        <div className="bg-white border border-blue-200 rounded-lg p-4 shadow-sm  list-spacing">
          <h3 className="text-lg font-semibold text-black flex items-center gap-2 ">
            <UserCheck className="text-blue w-5 h-5" />
            Quy ƒë·ªãnh v·ªÅ ch·ªó ngh·ªâ
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* Children 0-2 Years */}
            <div className="bg-blue-50 p-4 rounded-lg border border-blue-200 shadow-sm">
              <div className="flex items-center gap-2 mb-2">
                <Baby className="text-blue w-5 h-5" />
                <h4 className="text-md font-semibold text-black">
                  Tr·∫ª em 0-2 tu·ªïi
                </h4>
              </div>
              <p className="text-sm font-light text-black_sub">
                ·ªû mi·ªÖn ph√≠ n·∫øu s·ª≠ d·ª•ng gi∆∞·ªùng c√≥ s·∫µn. N·∫øu c·∫ßn gi∆∞·ªùng ph·ª•, s·∫Ω ph·ª•
                thu th√™m.
              </p>
            </div>

            {/*  3+ Years */}
            <div className="bg-blue-50 p-4 rounded-lg border border-blue-200 shadow-sm">
              <div className="flex items-center gap-2 mb-2">
                <Bed className="text-blue w-5 h-5" />
                <h4 className="text-md font-semibold text-black">
                  Kh√°ch t·ª´ 3 tu·ªïi tr·ªü l√™n
                </h4>
              </div>
              <p className="text-sm text-black_sub">
                C·∫ßn ƒë·∫∑t th√™m gi∆∞·ªùng ph·ª• v√† s·∫Ω ph·ª• thu th√™m.
              </p>
            </div>
          </div>
        </div>

        {/* Comments Section */}
        <Comments
          category="hotel"
          initialComments={data.comment}
          initialRating={data.rating}
          slug={slug}
        />

        {/* Location and FAQ */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 ">
          <CardText title="V·ªã tr√≠" className="w-full">
            <ShowOnMap address={data.location.detail} />
          </CardText>
          <div>
            <h3 className="text-lg font-medium mb-2">C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p</h3>
            <ul className="border border-gray-300 rounded-lg p-3">
              {LIST_QUESTION_HOTELS.map((question, index) => (
                <li
                  key={index}
                  className="flex items-center justify-between text-sm py-2 md:py-3 lg:py-4 border-b last:border-none"
                >
                  <span className="flex items-center gap-2">
                    <MessageCircle className="text-black w-4 h-4" />
                    {question.charAt(0).toUpperCase() + question.slice(1)}
                  </span>
                  <ChevronRight className="text-black w-4 h-4" />
                </li>
              ))}
            </ul>
          </div>
        </div>

        {/* Feedback Section */}
        <ReceiveFeedback />
      </div>
    </section>
  );
};

export default DetailHotelPage;
